trong nodejs, có một biến toàn cục là process.env chứa thông tin trạng thái môi trường mà ứng 
dụng đang chạy. dotenv cho phép tải các biến môi trường lưu trong tệp .env vào process.env

Async/await làm cho code bất đồng bộ nhìn và chạy gần giống như code đồng bộ.

URL là địa chỉ để mở 1 trang web
Route là cách(lộ trình) để đến trang web đó vd: app.get('/hi/:param1', function(req,res){} );

req.params đối tượng chứa tham số của route (trong URL).
req.query đối tượng chứa tham số truy vấn của URL (sau dấu ? trong URL).

ví dụ cho url: http://www.google.com/hi/there?qs1=you&qs2=tube
                req.query = {
                    qs1: 'you',
                    qs2: 'tube'
                }

                req.params = {
                    param1: 'there'
                }


app.use là hàm dùng để liên kết middleware với ứng dụng. Tham số đầu tiên của nó là một đường dẫn và những middlewares bị giới hạn chỉ 
được thực hiện cho bất kì route nào bắt đầu với đường dẫn đó

app.get được thiết kế để so sánh và xử lý route khi được request GET HTTP

và app.get được gọi khi HTTP method là GET còn app.use được gọi bất kể HTTP method là gì

check coi đã connect được tới mongodb chưa
    const db=mongoose.connection
    db.once('open',()=>console.log('1234'))

khi form có method là post thì dùng req.body, method là get thì dùng req.query


var pattern = new RegExp(pattern, attributes)
var pattern = /pattern/attributes

        pattern − Một chuỗi mà xác định pattern của Regular Expression hoặc Regular Expression khác.
        attributes − Một chuỗi tùy chọn chứa bất kỳ thuộc tính "g", "i", và "m" mà xác định tương ứng Global, không phân biệt kiểu chữ (case-insensitive), và nhiều so khớp (multiline matches).

Biểu thức chính quy bao gồm một mẫu nằm giữa dấu gạch chéo / 
Ví dụ: searchValue.name= new RegExp(req.query.name+"\\d", 'i') //  /pattern/modifier    /biểu thức/modifier
dấu \ đầu tiên bị bỏ qua
https://completejavascript.com/tim-hieu-regular-expression-javascript


virtual: thuộc tính ảo là các trường BỔ SUNG cho model, giá trị của nó được đặt với chức năng xác định và
không tồn tại trong cơ sở dữ liệu, chỉ tồn tại một cách logic

const query=model.find(query,callbacl(err, res)) sẽ trả về 1 query object có thể dùng để truy vấn(truy cập dữ liệu)
    query là object chứa mệnh đề điều kiện, có thể là biểu thức chính quy(string)
    VD: bằng            {key: value}
        nhỏ hơn         {key: {$lt: value}}
        lớn hơn bằng    {key: {$gte: value}}
        bắt đầu bắng S  {key: /^S/}        

Chỉ có thể truy cập dữ liệu được trả về thông qua promise query.exec() hoặc callback

Query.prototype.exec() dùng để thực hiện query, có callback
VD:  var query= User.find({name: {$gte: 20})
    query.exec((err, res)=>
    {

    })
    try 
    {
        const res=await query.exec()
    }catch()
    
https://www.geeksforgeeks.org/how-does-query-prototype-exec-work-in-mongoose/


































