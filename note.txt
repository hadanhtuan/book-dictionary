trong nodejs, có một biến toàn cục là process.env chứa thông tin trạng thái môi trường mà ứng 
dụng đang chạy. dotenv cho phép tải các biến môi trường lưu trong tệp .env vào process.env

Async/await làm cho code bất đồng bộ nhìn và chạy gần giống như code đồng bộ.

URL là địa chỉ để mở 1 trang web
Route là cách(lộ trình) để đến trang web đó vd: app.get('/hi/:param1', function(req,res){} );

req.params đối tượng chứa tham số của route (trong URL).
req.query đối tượng chứa tham số truy vấn của URL (sau dấu ? trong URL).

ví dụ cho url: http://www.google.com/hi/there?qs1=you&qs2=tube
                req.query = {
                    qs1: 'you',
                    qs2: 'tube'
                }

                req.params = {
                    param1: 'there'
                }


app.use là hàm dùng để liên kết middleware với ứng dụng. Tham số đầu tiên của nó là một đường dẫn và những middlewares bị giới hạn chỉ 
được thực hiện cho bất kì route nào bắt đầu với đường dẫn đó

app.get được thiết kế để so sánh và xử lý route khi được request GET HTTP

và app.get được gọi khi HTTP method là GET còn app.use được gọi bất kể HTTP method là gì

check coi đã connect được tới mongodb chưa
    const db=mongoose.connection
    db.once('open',()=>console.log('1234'))

khi form có method là post thì dùng req.body, method là get thì dùng req.query


var pattern = new RegExp(pattern, attributes)
var pattern = /pattern/attributes

        pattern − Một chuỗi mà xác định pattern của Regular Expression hoặc Regular Expression khác.
        attributes − Một chuỗi tùy chọn chứa bất kỳ thuộc tính "g", "i", và "m" mà xác định tương ứng Global, không phân biệt kiểu chữ (case-insensitive), và nhiều so khớp (multiline matches).

Biểu thức chính quy bao gồm một mẫu nằm giữa dấu gạch chéo / 
Ví dụ: searchValue.name= new RegExp(req.query.name+"\\d", 'i') //  /pattern/modifier    /biểu thức/modifier
dấu \ đầu tiên bị bỏ qua
https://completejavascript.com/tim-hieu-regular-expression-javascript


virtual: thuộc tính ảo là các trường BỔ SUNG cho model, giá trị của nó được đặt với chức năng xác định và
không tồn tại trong cơ sở dữ liệu, chỉ tồn tại một cách logic

const query=model.find(query,callbacl(err, res)) sẽ trả về 1 query object có thể dùng để truy vấn(truy cập dữ liệu)
    query là object chứa mệnh đề điều kiện, có thể là biểu thức chính quy(string)
    VD: bằng            {key: value}
        nhỏ hơn         {key: {$lt: value}}
        lớn hơn bằng    {key: {$gte: value}}
        bắt đầu bắng S  {key: /^S/}        

Chỉ có thể truy cập dữ liệu được trả về thông qua promise query.exec() hoặc callback

Query.prototype.exec() dùng để thực hiện query, có callback
VD:  var query= User.find({name: {$gte: 20})
    query.exec((err, res)=>
    {

    })
    try 
    {
        const res=await query.exec()
    }catch()
    
https://www.geeksforgeeks.org/how-does-query-prototype-exec-work-in-mongoose/



Javascript là một trong những tài nguyên chặn trang, có nghĩa là việc hiển thị html có thể bị chặn hay làm chậm bởi javascript
khi parser đọc đến tag <script> thì quá trình parse sẽ tạm dừng và execute. async và defer giúp khắc phục.
    <script async src="script.js">  khi gặp thẻ có thuộc tính này thì vẫn parse cho đến khi download script xong thì parse html 
    sẽ tạm dừng để execute, sau đó lại tiếp tục parse html. Xử dụng khi script là 1 module tách biệt, không phụ thuộc vào script khác

    <script defer src="script.js"> parse html sẽ không dừng lại mà vẫn tiếp tục cho đến khi hoàn thành, download script file vẫn
    được thực hiện song song và sẽ execute những script này sau khi parse xong

//stringify: từ Javascript types ->JSON
//Parse: từ JSON ->Javascript types

Cài fileEncode plugin thì nó sẽ gửi về server một JSON(string), data sẽ được mã hóa thành base64 string

json được trả về sau khi submit input:
{
    "id": "b56kpu6u9",
    "name": "encoded-file.png",
    "type": "image/png",
    "size": 123456,
    "metadata": {
        "resize": {
            "mode": "force",
            "size": {
                "width": 200,
                "height": 200
            }
        },
        "crop": {
            "rect": {
                "x": 0.19234,
                "y": 0,
                "width": 1,
                "height": 0.61213
            },
            "aspectRatio": 1
        }
    },
    "data": "iVBORw0KGgoAAAANSUhEUgAAAMgAAADICAYAAA..."  //base64
}


dữ liệu thô là các số, ký tự, hình ảnh
Lớp buffer dùng để lưu trữ dữ liệu thô giống như một mảng các số nguyên

let buf=new Buffer.from(string, encoded)
mã hóa string theo encoded rồi lưu vào, vd mã hóa "abc" theo utf-8 rồi lưu








    // try {
    //     const books =  Book.find()
    //     console.log(books)
    //     res.render('books/index', {  // phải có await để khi render thì books đã được nạp xong
    //         books: books, 
    //         searchOptions: req.query
    //     })
    //     console.log(books)
    // }
    // catch {
    //     res.redirect('/')
    // }



router.get('/:id', (req, res)=>{
    console.log(req.params.id)
})

sau dấu : là biến có tên id
req.params trả về các biến được định nghĩa trong URL         


HTML form chỉ hỗ trợ method POST và GET nên muốn route đến PUT và DELETE phải cài method-override

Body-parser là một middleware dùng để xử lý dữ liệu các HTTP POST request


https://www.thanhlongdev.com/huong-dan-xay-dung-books-store-express-nodejs-phan1/

res.redirect(url) là đi đến url, sau khi đi đến url thì tất nhiên là sẽ router.get(url)
res.render(filename, data) render ra một file nằm trong views


pre là hàm xử lý trước khi data được lưu vào csdl(mongodb). Nó là 1 middleware

trong middleware thì next không có dừng những đoạn code sau nó, phải thêm return vào

next() dùng để gọi middleware tiếp theo có cùng route
next(err) với tham số là error sẽ gây "đoản mạch" và quăng error


mongoose có 4 loại middleware
    document middleware: save, remove, ....
    query middleware: find,....

findByIdAndDelete không phải là middleware



